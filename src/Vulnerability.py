"""
This module contains vulnerability object and relevant functions.

@co-authors: Mengmeng Ge, Kok Onn Chee
"""

from Node import *
from Network import *

class vulNode(node):
    """
    Create vulnerability object.
    """
    def __init__(self, name):
        super(vulNode, self).__init__(name)
        
        #Initialize privilege value
        self.privilege = None
        #Initialize value for input of the HARM
        self.val = 0
        #Initialize name
        self.name = name
        #Indicate whether patchable (p) or non-patchable (np)
        self.type = None
        #Indicate the severity of the vulnerability based on the metrics
        self.severity = None
        #Initialize metric values
        self.pro = 0
        self.impact = 0
        self.cost = 0
        self.risk = 0
        self.return_on_attack = 0

        #added by KO Chee
        #compromise rate
        self.cr = 0
        #attack success probability
        self.asp = 0
        #attack impact
        self.aim = 0

    def __str__(self):
        return self.name

def createVulsWithoutTypeNew(node, compromisedRate, atksuccessProp, atkImp, pri, name):
    """
    Create vulnerability network for node.

    :param node: node in the network which has vulnerabilities
    :param metricValue: assign a metric value to vulnerability (e.g. attack probability)
    :param pri: assign privilege value to vulnerability
    :param name: assign name to vulnerability
    :returns: none
    """
    
    #Instantiate vulnerability parameters
    vul = vulNode(name)
    vul.val = compromisedRate
    vul.privilege = pri
    vul.name = name
    vul.cr = compromisedRate
    vul.asp = atksuccessProp
    vul.aim = atkImp
    
    #Create a vulnerability network for the node
    if node.vul is None:
        node.vul = network()
        
    #Add vulnerability into the vulnerability network of node
    node.vul.nodes.append(vul)
    
    return None

def removeVul(node, vulT):
    """
    Remove one vulnerability.
    """
    temp = node.vul.nodes.copy()
    
    for x in temp:
        for y in vulT:
            if str(x.name) == str(y):
                node.vul.nodes.remove(x)

    for x in node.realPort:
        for y in node.realPort[x]:
            if str(y) == "Vuln":
                temp2 = node.realPort[x][y].copy()
                for z in temp2:
                    for a in vulT:
                        if a == z:
                            node.realPort[x][y].remove(z)
    return None

def removeAllVuln(node):
    """
    Remove all vulnerability.
    """
    node.vul.nodes.clear()

    for a in node.realPort:
        for b in node.realPort[a]:
            if str(b) == "Vuln":
                node.realPort[a][b].clear()
    return None